/* Generated By:JJTree: Do not edit this line. ASTMethodDeclaration.java */

package softtest.ast.java;

import softtest.callgraph.java.method.MethodNode;
import softtest.cfg.java.Graph;
import softtest.domain.java.*;
import softtest.IntervalAnalysis.java.*;

public class ASTMethodDeclaration extends AccessNode {
	public ASTMethodDeclaration(int id) {
		super(id);
	}

	public ASTMethodDeclaration(JavaParser p, int id) {
		super(p, id);
	}

	/**
	 * Accept the visitor. *
	 */
	@Override
	public Object jjtAccept(JavaParserVisitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	@Override
	public void dump(String prefix) {
		System.out.println(collectDumpedModifiers(prefix));
		dumpChildren(prefix);
	}

	/**
	 * Gets the name of the method.
	 *
	 * @return a String representing the name of the method
	 */
	public String getMethodName() {
		ASTMethodDeclarator md = (ASTMethodDeclarator) getFirstChildOfType(ASTMethodDeclarator.class);
		if (md != null)
			return md.getImage();
		return null;
	}

	public boolean isSyntacticallyPublic() {
		return super.isPublic();
	}

	public boolean isSyntacticallyAbstract() {
		return super.isAbstract();
	}

	@Override
	public boolean isPublic() {
		if (isInterfaceMember()) {
			return true;
		}
		return super.isPublic();
	}

	@Override
	public boolean isAbstract() {
		if (isInterfaceMember()) {
			return true;
		}
		return super.isAbstract();
	}

	public boolean isInterfaceMember() {
		ASTClassOrInterfaceDeclaration clz = (ASTClassOrInterfaceDeclaration) getFirstParentOfType(ASTClassOrInterfaceDeclaration.class);
		return clz != null && clz.isInterface();
	}

	public boolean isVoid() {
		return ((ASTResultType) getFirstChildOfType(ASTResultType.class)).isVoid();
	}

	public ASTResultType getResultType() {
		return (ASTResultType) getFirstChildOfType(ASTResultType.class);
	}

	public ASTBlock getBlock() {
		// FIXME doesn't work for all methods that use generics and declare exceptions
		if (this.jjtGetChild(2) instanceof ASTBlock) {
			return (ASTBlock) this.jjtGetChild(2);
		}
		if (jjtGetNumChildren() > 3) {
			if (this.jjtGetChild(3) instanceof ASTBlock) {
				return (ASTBlock) this.jjtGetChild(3);
			}
		}
		return null;
	}

	//added by xqing
	/** 控制流图 */
	private Graph graph = null;

	/** 设置控制流图 */
	public void setGraph(Graph graph) {
		this.graph = graph;
	}

	/** 获得控制流图 */
	public Graph getGraph() {
		return graph;
	}

	/** 函数返回值域 */
	private Object domain = null;

	/** 设置函数返回值域 */
	public void setDomain(Object domain) {
		this.domain = domain;
		if(type!=null){
			MethodNode mn=MethodNode.findMethodNode(type);
			if(mn!=null){
				mn.setDomain(domain);
			}
		}
	}

	/** 获得函数返回值域 */
	public Object getDomain() {
		return domain;
	}
		
	private Object type=null;
	
	public ClassType getDomainType(){
		if (isVoid()) {
			return ClassType.ARBITRARY;
		}
		ASTResultType resulttype = getResultType();
		if (resulttype != null && resulttype.getFirstDirectChildOfType(ASTType.class) != null) {
			ASTType type = (ASTType) resulttype.getFirstDirectChildOfType(ASTType.class);
			String typeimage = type.getTypeImage();
			if (typeimage == null) {
				return ClassType.ARBITRARY;
			}
			if(type.isArray()){
				return ClassType.ARRAY;
			}
			if (typeimage.equals("boolean")) {
				return ClassType.BOOLEAN;
			} else if (typeimage.equals("byte")||typeimage.equals("char")
					||typeimage.equals("int")||typeimage.equals("long")||typeimage.equals("short")) {
				return ClassType.INT;
			} else if (typeimage.equals("double")||typeimage.equals("float")) {
				return ClassType.DOUBLE;
			} else {
				return ClassType.REF;
			}
		} else {
			return ClassType.ARBITRARY;
		}
	}

	/** 返回函数默认初始化值域*/
	public Object getInitDomain() {
		if (isVoid()) {
			return new ArbitraryDomain();
		} else {
			ASTResultType resulttype = getResultType();
			if (resulttype != null && resulttype.getFirstDirectChildOfType(ASTType.class) != null) {
				ASTType type = (ASTType) resulttype.getFirstDirectChildOfType(ASTType.class);
				String typeimage = type.getTypeImage();
				if (typeimage == null) {
					return new ArbitraryDomain();
				}
				if(type.isArray()){
					return new ArrayDomain(type.getArrayDepth());
				}
				if (typeimage.equals("boolean")) {
					return BooleanDomain.getUnknownDomain();
				} else if (typeimage.equals("byte")) {
					return IntegerDomain.getUnknownDomain();
				} else if (typeimage.equals("char")) {
					return IntegerDomain.getUnknownDomain();
				} else if (typeimage.equals("double")) {
					return DoubleDomain.getUnknownDomain();
				} else if (typeimage.equals("float")) {
					return DoubleDomain.getUnknownDomain();
				} else if (typeimage.equals("int")) {
					return IntegerDomain.getUnknownDomain();
				} else if (typeimage.equals("long")) {
					return IntegerDomain.getUnknownDomain();
				} else if (typeimage.equals("short")) {
					return IntegerDomain.getUnknownDomain();
				} else {
					return ReferenceDomain.getUnknownDomain();
				}
			} else {
				return new ArbitraryDomain();
			}
		}
	}

	//added by yangxiu
	public Class[] getParameterTypes() {
		for (int i = 0 ; i < this.jjtGetNumChildren() ; ++i) {
			if (this.jjtGetChild(i) instanceof ASTMethodDeclarator) {
				return ((ASTMethodDeclarator)this.jjtGetChild(i)).getParameterTypes();
			}
		}
		return null;
	}

	public Object getType() {
		return type;
	}

	public void setType(Object type) {
		this.type = type;
	}
}
