/* Generated By:JJTree: Do not edit this line. ASTBlockStatement.java */

package softtest.ast.java;

public class ASTBlockStatement extends SimpleJavaNode {
//public class ASTBlockStatement extends SimpleJavaNode implements Comparable {  LW
	
	/*
	// Karp Rabin hash code         [ LW ]
	private int KRHashcode;
	private int index;
	*/
	
    public ASTBlockStatement(int id) {
        super(id);
    }

    public ASTBlockStatement(JavaParser p, int id) {
        super(p, id);
    }
	

    /**
     * Accept the visitor. *
     */
    @Override
	public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * Tells if this BlockStatement is an allocation statement.
     * This is done by
     *
     * @return the result of !findChildrenOfType(ASTAllocationExpression.class).isEmpty()
     */
    public final boolean isAllocation() {
        return !findChildrenOfType(ASTAllocationExpression.class).isEmpty();
    }

    
    //////////////////////////////////////////////////////////   [ LW ]
	/*
    public int getKRHashcode() {
		return KRHashcode;
	}
	
	public void setKRHashcode(int krHashcode) {
		this.KRHashcode = krHashcode;
	}

	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}
    */
	////////////////////////////////////////////////////       [ LW ]
	// comparable
    /*
    public int compareTo(Object o) {
    	ASTBlockStatement other = (ASTBlockStatement) o;
        return getIndex() - other.getIndex();
    }
    */
}
