/* Generated By:JJTree: Do not edit this line. ASTPrimaryExpression.java */

package softtest.ast.java;

import java.lang.reflect.Method;

public class ASTPrimaryExpression extends ExpressionBase {
    public ASTPrimaryExpression(int id) {
        super(id);
    }

    public ASTPrimaryExpression(JavaParser p, int id) {
        super(p, id);
    }


    /**
     * Accept the visitor. *
     */
    @Override
	public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }

    /**
     * @return 最后一个类型为Method的孩子 类型
     */
    public Method getLastMethod(){
    	Method ret =null;
    	for(int i=jjtGetNumChildren()-1;i>=0;i--){
    		if(jjtGetChild(i) instanceof ExpressionBase){
    			ExpressionBase e=(ExpressionBase)jjtGetChild(i);
    			if(e.getType() instanceof Method){
    				ret =(Method) e.getType();
    				return ret;
    			}
    		}
    	}
    	return ret;
    }
    
    /**
     * @return  最后一个类型为Method的孩子节点
     */
    public SimpleJavaNode getLastMethodTreeNode(){
    	SimpleJavaNode ret =null;
    	for(int i=jjtGetNumChildren()-1;i>=0;i--){
    		if(jjtGetChild(i) instanceof ExpressionBase){
    			ExpressionBase e=(ExpressionBase)jjtGetChild(i);
    			if(e.getType() instanceof Method){
    				ret =(SimpleJavaNode) jjtGetChild(i);
    				return ret;
    			}
    		}
    	}
    	return ret;
    }
}
