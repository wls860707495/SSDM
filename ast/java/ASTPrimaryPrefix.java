/* Generated By:JJTree: Do not edit this line. ASTPrimaryPrefix.java */

package softtest.ast.java;

public class ASTPrimaryPrefix extends ExpressionBase {
    public ASTPrimaryPrefix(int id) {
        super(id);
    }

    public ASTPrimaryPrefix(JavaParser p, int id) {
        super(p, id);
    }

    private boolean usesThisModifier;
    private boolean usesSuperModifier;

    public void setUsesThisModifier() {
        usesThisModifier = true;
    }

    public boolean usesThisModifier() {
        return this.usesThisModifier;
    }

    public void setUsesSuperModifier() {
        usesSuperModifier = true;
    }

    public boolean usesSuperModifier() {
        return this.usesSuperModifier;
    }

    @Override
	public String getLabel() {
        String out = getImage();
        if (usesSuperModifier) {
            return "super." + out;
        } else if (usesThisModifier) {
            if (getImage() == null) {
                return "this";
            } else {
                return "this." + out;
            }
        }
        return out;
    }

    @Override
	public void dump(String prefix) {
        String out = getImage();
        if (usesSuperModifier) {
            out = "super." + out;
        } else if (usesThisModifier) {
            if (getImage() == null) {
                out = "this";
            } else {
                out = "this." + out;
            }
        }

        if (out == null) {
            System.out.println(toString(prefix));
        } else {
            System.out.println(toString(prefix) + ":" + out);
        }
        dumpChildren(prefix);
    }

    /**
     * Accept the visitor. *
     */
    @Override
	public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
    
    //added by xqing
	public boolean isMethodName() {
		boolean ret = false;
		if (jjtGetParent() instanceof ASTPrimaryExpression) {
			ASTPrimaryExpression primaryexpr = (ASTPrimaryExpression) jjtGetParent();
			int find = -1;
			for (int i = 0; i < primaryexpr.jjtGetNumChildren(); i++) {
				if (primaryexpr.jjtGetChild(i) == this) {
					find = i;
					break;
				}
			}
			if (find >= 0 && primaryexpr.jjtGetNumChildren() > find + 1) {
				if (primaryexpr.jjtGetChild(find + 1) instanceof ASTPrimarySuffix) {
					ASTPrimarySuffix suffix = (ASTPrimarySuffix) primaryexpr
							.jjtGetChild(find + 1);
					if (suffix.isArguments()) {
						ret = true;
					}
				}
			}
		}
		return ret;
	}
	
    public Class[] getParameterTypes() {
		Class[] types = null;

		if (jjtGetParent() instanceof ASTPrimaryExpression) {
			ASTPrimaryExpression primaryexpr = (ASTPrimaryExpression) jjtGetParent();
			int find = -1;
			for (int i = 0; i < primaryexpr.jjtGetNumChildren(); i++) {
				if (primaryexpr.jjtGetChild(i) == this) {
					find = i;
					break;
				}
			}
			if (find >= 0 && primaryexpr.jjtGetNumChildren() > find + 1) {
				if (primaryexpr.jjtGetChild(find + 1) instanceof ASTPrimarySuffix) {
					ASTPrimarySuffix suffix = (ASTPrimarySuffix) primaryexpr
							.jjtGetChild(find + 1);
					if (suffix.isArguments()) {
						ASTArguments args = (ASTArguments) suffix
								.jjtGetChild(0);
						if (args.jjtGetNumChildren() > 0) {
							ASTArgumentList argslist = (ASTArgumentList) args
									.jjtGetChild(0);
							types = new Class[argslist.jjtGetNumChildren()];
							for (int i = 0; i < argslist.jjtGetNumChildren(); i++) {
								ExpressionBase e = (ExpressionBase) argslist
										.jjtGetChild(i);
								try {
									types[i] = (Class) e.getType();
								} catch (ClassCastException ex) {
									// TODO : BUGFIX
									// fields from super class
									//throw new RuntimeException(this.getBeginLine()+":"+this.getBeginColumn(),e);
								}
							}
						}
					}
				}
			}
		}
		return types;
	}
}
