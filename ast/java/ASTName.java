/* Generated By:JJTree: Do not edit this line. ASTName.java */

package softtest.ast.java;

//added by xqing
import java.util.*;

import softtest.symboltable.java.NameDeclaration;

public class ASTName extends ExpressionBase {
    public ASTName(int id) {
        super(id);
    }

    public ASTName(JavaParser p, int id) {
        super(p, id);
    }

    //added by xqing
   // private NameDeclaration nd;
    private List<NameDeclaration> nds = new ArrayList<NameDeclaration>();
    private List types=new ArrayList();
    
    @Override
	public Object getType(){
    	if(types.isEmpty()){
    		return null;
    	}
    	else{
    		return types.get(types.size()-1);
    	}
    }
    
    @Override
	public String getTypeString(){
    	return ""+getType();
    }
    
    public List getTypes(){
    	return types;
    }
    
    @Override
	public void setType(Object type){
    	 this.types.add(type);
    }

    public void setNameDeclaration(NameDeclaration nd) {
        this.nds.add(nd);
        //this.nd = nd;
    }

    public NameDeclaration getNameDeclaration() {
    	if(nds.isEmpty()){
    		return null;
    	}
    	else{
    		return nds.get(nds.size()-1);
    	}
    	//return this.nd;
    }
    
    public List<NameDeclaration> getNameDeclarationList(){
    	return nds;
    }

    /**
     * Accept the visitor. *
     */
    @Override
	public Object jjtAccept(JavaParserVisitor visitor, Object data) {
        return visitor.visit(this, data);
    }
    
    public boolean isMethodName(){
    	boolean ret=false;
    	if(jjtGetParent() instanceof ASTPrimaryPrefix){
    		ASTPrimaryPrefix prefix=(ASTPrimaryPrefix)jjtGetParent();
    		if(prefix.jjtGetParent() instanceof ASTPrimaryExpression){
    			ASTPrimaryExpression primaryexpr=(ASTPrimaryExpression)prefix.jjtGetParent();
    			int find=-1;
    			for(int i=0;i<primaryexpr.jjtGetNumChildren();i++){
    				if(primaryexpr.jjtGetChild(i)==prefix){
    					find=i;
    					break;
    				}
    			}
    			if(find>=0&&primaryexpr.jjtGetNumChildren()>find+1){
    				if(primaryexpr.jjtGetChild(find+1) instanceof ASTPrimarySuffix){
    					ASTPrimarySuffix suffix=(ASTPrimarySuffix)primaryexpr.jjtGetChild(find+1);
    					if(suffix.isArguments()){
    						ret=true;
    					}
    				}
    			}
    		}
    	}
    	
    	return ret;
    }
    
    public Class[] getParameterTypes(){
    	Class[] types=null;
    	
    	if(jjtGetParent() instanceof ASTPrimaryPrefix){
    		ASTPrimaryPrefix prefix=(ASTPrimaryPrefix)jjtGetParent();
    		if(prefix.jjtGetParent() instanceof ASTPrimaryExpression){
    			ASTPrimaryExpression primaryexpr=(ASTPrimaryExpression)prefix.jjtGetParent();
    			int find=-1;
    			for(int i=0;i<primaryexpr.jjtGetNumChildren();i++){
    				if(primaryexpr.jjtGetChild(i)==prefix){
    					find=i;
    					break;
    				}
    			}
    			if(find>=0&&primaryexpr.jjtGetNumChildren()>find+1){
    				if(primaryexpr.jjtGetChild(find+1) instanceof ASTPrimarySuffix){
    					ASTPrimarySuffix suffix=(ASTPrimarySuffix)primaryexpr.jjtGetChild(find+1);
    					if(suffix.isArguments()){
    						ASTArguments args=(ASTArguments)suffix.jjtGetChild(0);
    						if(args.jjtGetNumChildren()>0){
    							ASTArgumentList argslist=(ASTArgumentList)args.jjtGetChild(0);
    							types=new Class[argslist.jjtGetNumChildren()];
    							for(int i=0;i<argslist.jjtGetNumChildren();i++){
    								ExpressionBase e=(ExpressionBase)argslist.jjtGetChild(i);
    								try {
    									types[i]=(Class)e.getType();
    								} catch (ClassCastException ex) {
    									// TODO : BUGFIX
    									// fields from super class
    									//throw new RuntimeException(this.getBeginLine()+":"+this.getBeginColumn(),e);
    								}
    							}
    						}
    					}
    				}
    			}
    		}
    	}
    	
    	return types;
    }

}
